buildscript {
    repositories {
        mavenLocal()
        maven { url 'https://maven.aliyun.com/repository/public/' }
        mavenCentral()
    }
    dependencies {
        classpath 'net.researchgate:gradle-release:2.6.0'
    }
    //skip Test tasks
//    gradle.taskGraph.whenReady {
//        tasks.each { task ->
//            if (task.name.contains("test")) {
//                task.enabled = false
//            }
//        }
//    }
}

plugins{
    id 'com.gradle.plugin-publish' version '1.0.0'
}

apply plugin: 'java-gradle-plugin'
apply plugin: 'maven-publish'
apply plugin: 'signing'
apply plugin: 'net.researchgate.release'



group 'net.xdob.pf4boot'

sourceCompatibility = project.jdkVersion
targetCompatibility = project.jdkVersion

/**
 * signing.properties 文件内容示例如下
 * signing.keyId=xx
 * signing.password=xxx
 * signing.secretKeyRingFile=C:/Users/admin/.gnupg/**_SECRET.gpg
 *
 * ossrhUsername=xx
 * ossrhPassword=xxx
 */
File signing_cfg = new File("$project.rootDir/signing.properties")
if(signing_cfg.exists()) {
    Properties props = new Properties()
    props.load(new FileInputStream(signing_cfg))
    props.each { prop ->
        project.ext.set(prop.key, prop.value)
    }

    // 将构建的包签名
    signing {
        sign configurations.archives
    }
}

release {
    failOnUnversionedFiles = true
    failOnCommitNeeded = true
    failOnPublishNeeded = true
    failOnSnapshotDependencies = false
    failOnUpdateNeeded = true
    revertOnFail = true
    tagTemplate = 'v${version}'
    scmAdapters = [
        net.researchgate.release.GitAdapter
    ]

    git {
        requireBranch = 'master'
        pushToRemote = 'origin'
        pushToBranchPrefix = ''
        commitVersionFileOnly = false
        signTag = false
    }

}

repositories {
    // Use jcenter for resolving dependencies.
    // You can declare any Maven/Ivy/file repository here.
    //jcenter()
    mavenLocal()
    maven { url 'https://maven.aliyun.com/repository/public/' }
    mavenCentral()
}

dependencies {
    // Use JUnit test framework for unit tests
    testImplementation 'junit:junit:4.12'
}


// Add a source set for the functional test suite
sourceSets {
    functionalTest {
    }
}

gradlePlugin.testSourceSets(sourceSets.functionalTest)
configurations.functionalTestImplementation.extendsFrom(configurations.testImplementation)

// Add a task to run the functional tests
task functionalTest(type: Test) {
    testClassesDirs = sourceSets.functionalTest.output.classesDirs
    classpath = sourceSets.functionalTest.runtimeClasspath
}

check {
    // Run the functional tests as part of `check`
    dependsOn(tasks.functionalTest)
}

//对于典型的 Java 项目，您可以添加一个javadocJar以及一个 sourcesJar任务
task javadocJar(type: Jar) {
    archiveClassifier = 'javadoc'
    from javadoc
}

task sourcesJar(type: Jar) {
    archiveClassifier = 'sources'
    from sourceSets.main.allSource
}

// javadoc 配置，这里是自定义了 java doc 的一些配置
javadoc {
    description = "Generates project-level javadoc for use in -javadoc jar"

    options.memberLevel = org.gradle.external.javadoc.JavadocMemberLevel.PROTECTED
    options.author = true
    options.version = true
    options.header = project.name
    options.addStringOption('Xdoclint:none', '-quiet')

    // suppress warnings due to cross-module @see and @link references;
    // note that global 'api' task does display all warnings.
    logging.captureStandardError LogLevel.INFO
    logging.captureStandardOutput LogLevel.INFO // suppress "## warnings" message
    options.encoding = "UTF-8"  //编码一定要配置否则直接出错
    options.charSet = 'UTF-8'
}

// 并将它们与项目 jar 本身一起连接到 artifacts 集合中：
artifacts {
    archives javadocJar, sourcesJar
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId = project.group
            artifactId = project.name
            version = project.version
            //如果不定义，则会按照以上默认值执行
            // 添加源码jar
            artifact sourcesJar
            // 添加javadocjar
            artifact javadocJar
            // 指定要发布的模块
            from components.java

            pom {
                name = 'pf4boot-plugin'
                description = "pf4boot插件开发的gradle插件"
                url = 'https://github.com/dibyang/pf4boot-plugin'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'yangzj'
                        name = 'Yang zhijian'
                        email = '3227817@qq.com'
                    }
                }
                scm {
                    connection = 'scm:git:https://github.com/dibyang/pf4boot-plugin.git'
                    developerConnection = 'scm:git:https://github.com/dibyang/pf4boot-plugin.git'
                    url = 'https://github.com/dibyang/pf4boot-plugin.git'
                }
            }

//            versionMapping {
//                usage('java-api') {
//                    fromResolutionOf('runtimeClasspath')
//                }
//                usage('java-runtime') {
//                    fromResolutionResult()
//                }
//            }
        }
    }
    repositories {
        maven {
            // 发布仓库配置，这里基于version后缀是否为SNAPSHOT来区分发布到release库还是snapshots库
            def releasesRepoUrl = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
            def snapshotsRepoUrl = "https://s01.oss.sonatype.org/content/repositories/snapshots/"
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl

            //认证用户和密码，在配置文件中配置
            //oss-sonatype的登录用户名和密码
            credentials {
                username findProperty("ossrhUsername")?:""
                password findProperty("ossrhPassword")?:""
            }
        }
    }
}

signing {
    sign publishing.publications.mavenJava
}

afterReleaseBuild.dependsOn publishMavenJavaPublicationToMavenRepository


pluginBundle {
    website = 'https://github.com/dibyang/pf4boot-plugin'
    vcsUrl = 'https://github.com/dibyang/pf4boot-plugin'
    description = 'pf4boot插件开发的gradle插件' //插件描述
    tags = ['pf4boot-plugin','pf4boot','tags'] //搜索关键词

}

gradlePlugin {
    // Define the plugin
    plugins {
        pf4bootPlugin {
            id = 'net.xdob.pf4boot-plugin'
            implementationClass = 'net.xdob.pf4boot.Pf4bootPlugin'
            displayName = 'pf4boot gradle plugin'
        }
    }
}