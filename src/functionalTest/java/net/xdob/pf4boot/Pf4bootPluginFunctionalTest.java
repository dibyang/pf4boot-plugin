/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package net.xdob.pf4boot;

import org.gradle.testkit.runner.BuildResult;
import org.gradle.testkit.runner.GradleRunner;
import org.junit.Test;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.Writer;
import java.nio.file.Files;

import static org.junit.Assert.assertTrue;

/**
 * A simple functional test for the 'net.xdob.pf4boot-plugin' plugin.
 */
public class Pf4bootPluginFunctionalTest {
  @Test
  public void canRunTask4Properties() throws IOException {
    // Setup the test build
    File projectDir = new File("build/functionalTest");
    Files.createDirectories(projectDir.toPath());
    writeString(new File(projectDir, "settings.gradle"), "");
    writeString(new File(projectDir, "build.gradle"),
        "plugins {\n" +
            "  id('java')\n" +
            "  id('net.xdob.pf4boot-plugin')\n" +
            "}\n");

    writeString(new File(projectDir, "plugin.properties"),
        "plugin.id = test-plugin1");
    // Run the build
    GradleRunner runner = GradleRunner.create();
    runner.forwardOutput();
    runner.withPluginClasspath();
    runner.withArguments("pf4boot");
    runner.withProjectDir(projectDir);
    BuildResult result = runner.build();

    // Verify the result
    assertTrue(result.getOutput().contains("build pf4boot plugin for test-plugin1."));

  }

  @Test
  public void canRunTask4Ext() throws IOException {
    // Setup the test build
    File projectDir = new File("build/functionalTest");
    Files.createDirectories(projectDir.toPath());
    writeString(new File(projectDir, "settings.gradle"), "");
    writeString(new File(projectDir, "build.gradle"),
        "plugins {\n" +
            "  id('java')\n" +
            "  id('net.xdob.pf4boot-plugin')\n" +
            "}\n"+
            "pf4bootPlugin {\n" +
            "  id = 'test-plugin2'\n" +
            "}\n");


    // Run the build
    GradleRunner runner = GradleRunner.create();
    runner.forwardOutput();
    runner.withPluginClasspath();
    runner.withArguments("pf4boot");
    runner.withProjectDir(projectDir);
    BuildResult result = runner.build();

    // Verify the result
    assertTrue(result.getOutput().contains("build pf4boot plugin for test-plugin2."));

  }



  private void writeString(File file, String string) throws IOException {
    try (Writer writer = new FileWriter(file)) {
      writer.write(string);
    }
  }
}
